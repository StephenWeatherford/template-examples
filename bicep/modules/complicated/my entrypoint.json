{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.22.7.55222",
      "templateHash": "7466604781491407218"
    },
    "description": "Azure Storage is a cloud-based storage service offered by Microsoft that provides highly scalable and durable storage for data and applications. Storage Accounts are the fundamental storage entity in Azure Storage and can be used to store data objects such as blobs, files, queues, tables, and disks.\n\n This Bicep module allows users to create or use existing Storage Accounts with options to control redundancy, access, and security settings. Zone-redundancy allows data to be stored across multiple Availability Zones, increasing availability and durability. Virtual network rules can be used to restrict or allow network traffic to and from the Storage Account. Encryption and TLS settings can be configured to ensure data security.\n \n The module supports both blob and file services, allowing users to store and retrieve unstructured data and files. The output of the module is the ID of the created or existing Storage Account, which can be used in other Azure resource deployments.",
    "owner": "github.com/StephenWeatherford",
    "name": "complicated source example"
  },
  "parameters": {
    "storagePrefix": {
      "type": "string",
      "minLength": 3,
      "maxLength": 11
    },
    "storageSKU": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Standard_ZRS",
        "Premium_LRS",
        "Premium_ZRS",
        "Standard_GZRS",
        "Standard_RAGZRS"
      ]
    },
    "location": {
      "type": "string"
    }
  },
  "variables": {
    "$fxv#0": "[CmdletBinding()]   \nparam(\n    # The subcription Id to log in to\n    [Parameter(Mandatory=$true)]\n    [string]\n    $SubscriptionId,\n    # The tenant Id to that contains the MSI\n    [Parameter(Mandatory=$true)]\n    [string]\n    $TenantId,\n    # The Resource Group Name that contains the storage account to write to\n    [Parameter(Mandatory=$true)]\n    [string]\n    $ResourceGroupName,\n    # The Storage Account to write to\n    [Parameter(Mandatory=$true)]\n    [string]\n    $StorageAccountName,\n    # The name of the container to write a blob to\n    [Parameter(Mandatory=$false)]\n    [string]\n    $ContainerName='msi'\n)\n\nif (!(Get-PackageProvider -Name NuGet -ErrorAction SilentlyContinue -ListAvailable)) \n{\n    Write-Verbose 'Installing nuget Package Provider'\n    Install-PackageProvider -Name nuget -Force\n}\n\nInstall-Module Az -AllowClobber -Verbose -Force\nInstall-Module Az.Storage -AllowClobber -Verbose -Force\n\nConnect-AzAccount -Identity -Verbose\n\n$ContainerName=$ContainerName.ToLowerInvariant()\n$BlobName=$env:COMPUTERNAME.ToLowerInvariant()\n$FileName=[System.IO.Path]::GetTempFileName()\nGet-Date | Out-File $FileName  \n\n$ctx = New-AzStorageContext -StorageAccountName $StorageAccountName -StorageAccountKey $StorageAccountKey -Environment AzureCloud\n\nSet-AzStorageBlobContent -Container $ContainerName -File $FileName -Blob $BlobName -Context $ctx -Force\n",
    "uniqueStorageName": "[format('{0}{1}', parameters('storagePrefix'), uniqueString(resourceGroup().id))]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-04-01",
      "name": "[variables('uniqueStorageName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('storageSKU')]"
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2020-12-01",
      "name": "name",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2020-12-01",
      "name": "[format('{0}/{1}', 'name', 'name')]",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.10",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "fileUris"
          ]
        },
        "protectedSettings": {
          "commandToExecute": "[variables('$fxv#0')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', 'name')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "m1",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "me myself"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "8019017868553956840"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of someone to say hi to."
              }
            }
          },
          "resources": [],
          "outputs": {
            "greeting": {
              "type": "string",
              "value": "[format('Hello from Bicep registry - Hi {0}!', parameters('name'))]",
              "metadata": {
                "description": "The hello message."
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "appConfig",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.2.56959",
              "templateHash": "16913245589958538752"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.. Default is the location of the resource group."
              }
            },
            "name": {
              "type": "string",
              "defaultValue": "[format('appconf-{0}', uniqueString(resourceGroup().id, subscription().id))]",
              "metadata": {
                "description": "Specifies the name of the App Configuration instance. Changing this forces a new resource to be created. It must me unique across Azure. Valid characters: Alphanumerics,underscores, and hyphens."
              },
              "maxLength": 50,
              "minLength": 5
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Free",
              "allowedValues": [
                "Free",
                "Standard"
              ],
              "metadata": {
                "description": "The SKU name of the configuration store."
              }
            },
            "softDeleteRetentionInDays": {
              "type": "int",
              "defaultValue": 7,
              "metadata": {
                "description": "The amount of time in days that the configuration store will be retained when it is soft deleted.  This field only works for \"Standard\" sku."
              },
              "maxValue": 7,
              "minValue": 1
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "The Public Network Access setting of the App Configuration store. When Disabled, only requests from Private Endpoints can access the App Configuration store."
              }
            },
            "disableLocalAuth": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Disables all authentication methods other than AAD authentication."
              }
            },
            "enablePurgeProtection": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enables the purge protection feature for the configuration store.  This field only works for \"Standard\" sku."
              }
            },
            "identityClientId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The client id of the identity which will be used to access key vault."
              }
            },
            "keyVaultKeyIdentifier": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The resource URI of the key vault key used to encrypt the data in the configuration store."
              }
            },
            "replicas": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The list of replicas for the configuration store with \"name\" and \"location\" parameters."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "The key-value pair tags to associate with the resource."
              }
            },
            "identityType": {
              "type": "string",
              "defaultValue": "None",
              "allowedValues": [
                "None",
                "SystemAssigned",
                "SystemAssigned,UserAssigned",
                "UserAssigned"
              ],
              "metadata": {
                "description": "TSpecifies the type of Managed Service Identity that should be configured on this App Configuration. The type \"SystemAssigned, UserAssigned\" includes both an implicitly created identity and a set of user-assigned identities. The type \"None\" will remove any identities from the Cosmos DB account."
              }
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "The list of user-assigned managed identities. The user identity dictionary key references will be ARM resource ids in the form: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}\""
              }
            },
            "lock": {
              "type": "string",
              "defaultValue": "NotSpecified",
              "allowedValues": [
                "CanNotDelete",
                "NotSpecified",
                "ReadOnly"
              ],
              "metadata": {
                "description": "Specify the type of lock on Cosmos DB account resource."
              }
            },
            "roleAssignments": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Array of role assignment objects that contain the \"roleDefinitionIdOrName\" and \"principalId\" to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, provide either the display name of the role definition, or its fully qualified ID in the following format: \"/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11\""
              }
            },
            "privateEndpoints": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Private Endpoints that should be created for Azure Cosmos DB account."
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 365,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Resource ID of the diagnostic storage account."
              }
            },
            "diagnosticWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Resource ID of the diagnostic log analytics workspace."
              }
            },
            "diagnosticEventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "diagnosticEventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "logsToEnable": {
              "type": "array",
              "defaultValue": [
                "HttpRequest",
                "Audit"
              ],
              "allowedValues": [
                "HttpRequest",
                "Audit"
              ],
              "metadata": {
                "description": "The name of logs that will be streamed."
              }
            },
            "metricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "The name of metrics that will be streamed."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogsWithDefaults",
                "count": "[length(parameters('logsToEnable'))]",
                "input": {
                  "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogsWithDefaults')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": "[if(not(equals(parameters('diagnosticLogsRetentionInDays'), 0)), true(), false())]",
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "diagnosticsMetricsWithDefaults",
                "count": "[length(parameters('metricsToEnable'))]",
                "input": {
                  "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetricsWithDefaults')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": "[if(not(equals(parameters('diagnosticLogsRetentionInDays'), 0)), true(), false())]",
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "privateEndpointsWithDefaults",
                "count": "[length(parameters('privateEndpoints'))]",
                "input": {
                  "name": "[format('{0}-{1}', parameters('name'), parameters('privateEndpoints')[copyIndex('privateEndpointsWithDefaults')].name)]",
                  "privateLinkServiceId": "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('name'))]",
                  "groupIds": [
                    "configurationStores"
                  ],
                  "subnetId": "[parameters('privateEndpoints')[copyIndex('privateEndpointsWithDefaults')].subnetId]",
                  "privateDnsZones": "[if(contains(parameters('privateEndpoints')[copyIndex('privateEndpointsWithDefaults')], 'privateDnsZoneId'), createArray(createObject('name', 'default', 'zoneId', parameters('privateEndpoints')[copyIndex('privateEndpointsWithDefaults')].privateDnsZoneId)), createArray())]",
                  "manualApprovalEnabled": "[if(contains(parameters('privateEndpoints')[copyIndex('privateEndpointsWithDefaults')], 'manualApprovalEnabled'), parameters('privateEndpoints')[copyIndex('privateEndpointsWithDefaults')].manualApprovalEnabled, false())]"
                }
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.AppConfiguration/configurationStores",
              "apiVersion": "2023-03-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('skuName')]"
              },
              "properties": {
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                "disableLocalAuth": "[parameters('disableLocalAuth')]",
                "enablePurgeProtection": "[if(equals(parameters('skuName'), 'Standard'), parameters('enablePurgeProtection'), null())]",
                "encryption": "[if(and(not(empty(parameters('keyVaultKeyIdentifier'))), not(empty(parameters('identityClientId')))), createObject('keyVaultProperties', createObject('keyIdentifier', parameters('keyVaultKeyIdentifier'), 'identityClientId', parameters('identityClientId'))), null())]",
                "softDeleteRetentionInDays": "[if(equals(parameters('skuName'), 'Standard'), parameters('softDeleteRetentionInDays'), null())]"
              },
              "tags": "[parameters('tags')]",
              "identity": "[if(contains(parameters('identityType'), 'UserAssigned'), createObject('type', parameters('identityType'), 'userAssignedIdentities', if(contains(parameters('identityType'), 'UserAssigned'), parameters('userAssignedIdentities'), createObject())), createObject('type', parameters('identityType')))]"
            },
            {
              "copy": {
                "name": "appConfigurationReplicas",
                "count": "[length(parameters('replicas'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.AppConfiguration/configurationStores/replicas",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('name'), parameters('replicas')[copyIndex()].name)]",
              "location": "[parameters('replicas')[copyIndex()].location]",
              "dependsOn": [
                "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('name'))]"
              ]
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.AppConfiguration/configurationStores/{0}', parameters('name'))]",
              "name": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetricsWithDefaults')]",
                "logs": "[variables('diagnosticsLogsWithDefaults')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('name'))]"
              ]
            },
            {
              "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.AppConfiguration/configurationStores/{0}', parameters('name'))]",
              "name": "[format('{0}-{1}-lock', parameters('name'), toLower(parameters('lock')))]",
              "properties": {
                "level": "[parameters('lock')]",
                "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "appConfiguration_rbac",
                "count": "[length(parameters('roleAssignments'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('cosmosdb-rbac-{0}-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "description": {
                    "value": "[coalesce(tryGet(parameters('roleAssignments')[copyIndex()], 'description'), '')]"
                  },
                  "principalIds": {
                    "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                  },
                  "roleDefinitionIdOrName": {
                    "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                  },
                  "principalType": {
                    "value": "[coalesce(tryGet(parameters('roleAssignments')[copyIndex()], 'principalType'), '')]"
                  },
                  "resourceId": {
                    "value": "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('name'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.16.2.56959",
                      "templateHash": "6726558242263499767"
                    }
                  },
                  "parameters": {
                    "description": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "principalIds": {
                      "type": "array"
                    },
                    "principalType": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "roleDefinitionIdOrName": {
                      "type": "string"
                    },
                    "resourceId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "App Configuration Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5ae67dd6-50cb-40e7-96ff-dc2bfa4b606b')]",
                      "App Configuration Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '516239f1-63e1-4d78-a4de-a74fb236a071')]",
                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                      "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                      "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                      "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                      "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                      "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "roleAssignment",
                        "count": "[length(parameters('principalIds'))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.AppConfiguration/configurationStores/{0}', last(split(parameters('resourceId'), '/')))]",
                      "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                      "properties": {
                        "description": "[parameters('description')]",
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                        "principalId": "[parameters('principalIds')[copyIndex()]]",
                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-{1}-private-endpoints', parameters('name'), uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "privateEndpoints": {
                    "value": "[variables('privateEndpointsWithDefaults')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.16.2.56959",
                      "templateHash": "5781174049967211056"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "privateEndpoints": {
                      "type": "array"
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "varPrivateEndpoints",
                        "count": "[length(parameters('privateEndpoints'))]",
                        "input": {
                          "name": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].name]",
                          "privateLinkServiceId": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].privateLinkServiceId]",
                          "groupIds": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].groupIds]",
                          "subnetId": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].subnetId]",
                          "privateDnsZones": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')], 'privateDnsZones'), createArray())]",
                          "customNetworkInterfaceName": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')], 'customNetworkInterfaceName'), null())]",
                          "manualApprovalEnabled": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')], 'manualApprovalEnabled'), false())]"
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "privateEndpoint",
                        "count": "[length(variables('varPrivateEndpoints'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2022-05-01",
                      "name": "[format('{0}-{1}', variables('varPrivateEndpoints')[copyIndex()].name, uniqueString(variables('varPrivateEndpoints')[copyIndex()].name, variables('varPrivateEndpoints')[copyIndex()].subnetId, variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "privateLinkServiceConnections": "[if(variables('varPrivateEndpoints')[copyIndex()].manualApprovalEnabled, null(), createArray(createObject('name', variables('varPrivateEndpoints')[copyIndex()].name, 'properties', createObject('privateLinkServiceId', variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId, 'groupIds', if(not(empty(variables('varPrivateEndpoints')[copyIndex()].groupIds)), variables('varPrivateEndpoints')[copyIndex()].groupIds, null())))))]",
                        "manualPrivateLinkServiceConnections": "[if(variables('varPrivateEndpoints')[copyIndex()].manualApprovalEnabled, createArray(createObject('name', variables('varPrivateEndpoints')[copyIndex()].name, 'properties', createObject('privateLinkServiceId', variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId, 'groupIds', if(not(empty(variables('varPrivateEndpoints')[copyIndex()].groupIds)), variables('varPrivateEndpoints')[copyIndex()].groupIds, null())))), null())]",
                        "subnet": {
                          "id": "[variables('varPrivateEndpoints')[copyIndex()].subnetId]"
                        },
                        "customNetworkInterfaceName": "[variables('varPrivateEndpoints')[copyIndex()].customNetworkInterfaceName]"
                      }
                    },
                    {
                      "copy": {
                        "name": "privateDnsZoneGroup",
                        "count": "[length(variables('varPrivateEndpoints'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2022-05-01",
                      "name": "[format('{0}/{1}', format('{0}-{1}', variables('varPrivateEndpoints')[copyIndex()].name, uniqueString(variables('varPrivateEndpoints')[copyIndex()].name, variables('varPrivateEndpoints')[copyIndex()].subnetId, variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId)), 'default')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "privateDnsZoneConfigs",
                            "count": "[length(variables('varPrivateEndpoints')[copyIndex()].privateDnsZones)]",
                            "input": {
                              "name": "[coalesce(tryGet(variables('varPrivateEndpoints')[copyIndex()].privateDnsZones[copyIndex('privateDnsZoneConfigs')], 'name'), 'default')]",
                              "properties": {
                                "privateDnsZoneId": "[variables('varPrivateEndpoints')[copyIndex()].privateDnsZones[copyIndex('privateDnsZoneConfigs')].zoneId]"
                              }
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-{1}', variables('varPrivateEndpoints')[copyIndex()].name, uniqueString(variables('varPrivateEndpoints')[copyIndex()].name, variables('varPrivateEndpoints')[copyIndex()].subnetId, variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId)))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "metadata": {
                "description": "The resource id of the App Configuration instance."
              },
              "value": "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the App Configuration instance."
              },
              "value": "[parameters('name')]"
            },
            "systemAssignedIdentityPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "Object Id of system assigned managed identity for Cosmos DB account (if enabled)."
              },
              "value": "[if(contains(parameters('identityType'), 'SystemAssigned'), reference(resourceId('Microsoft.AppConfiguration/configurationStores', parameters('name')), '2023-03-01', 'full').identity.principalId, '')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "m6",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.2.56959",
              "templateHash": "16913245589958538752"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.. Default is the location of the resource group."
              }
            },
            "name": {
              "type": "string",
              "defaultValue": "[format('appconf-{0}', uniqueString(resourceGroup().id, subscription().id))]",
              "metadata": {
                "description": "Specifies the name of the App Configuration instance. Changing this forces a new resource to be created. It must me unique across Azure. Valid characters: Alphanumerics,underscores, and hyphens."
              },
              "maxLength": 50,
              "minLength": 5
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Free",
              "allowedValues": [
                "Free",
                "Standard"
              ],
              "metadata": {
                "description": "The SKU name of the configuration store."
              }
            },
            "softDeleteRetentionInDays": {
              "type": "int",
              "defaultValue": 7,
              "metadata": {
                "description": "The amount of time in days that the configuration store will be retained when it is soft deleted.  This field only works for \"Standard\" sku."
              },
              "maxValue": 7,
              "minValue": 1
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "The Public Network Access setting of the App Configuration store. When Disabled, only requests from Private Endpoints can access the App Configuration store."
              }
            },
            "disableLocalAuth": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Disables all authentication methods other than AAD authentication."
              }
            },
            "enablePurgeProtection": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enables the purge protection feature for the configuration store.  This field only works for \"Standard\" sku."
              }
            },
            "identityClientId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The client id of the identity which will be used to access key vault."
              }
            },
            "keyVaultKeyIdentifier": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The resource URI of the key vault key used to encrypt the data in the configuration store."
              }
            },
            "replicas": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The list of replicas for the configuration store with \"name\" and \"location\" parameters."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "The key-value pair tags to associate with the resource."
              }
            },
            "identityType": {
              "type": "string",
              "defaultValue": "None",
              "allowedValues": [
                "None",
                "SystemAssigned",
                "SystemAssigned,UserAssigned",
                "UserAssigned"
              ],
              "metadata": {
                "description": "TSpecifies the type of Managed Service Identity that should be configured on this App Configuration. The type \"SystemAssigned, UserAssigned\" includes both an implicitly created identity and a set of user-assigned identities. The type \"None\" will remove any identities from the Cosmos DB account."
              }
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "The list of user-assigned managed identities. The user identity dictionary key references will be ARM resource ids in the form: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}\""
              }
            },
            "lock": {
              "type": "string",
              "defaultValue": "NotSpecified",
              "allowedValues": [
                "CanNotDelete",
                "NotSpecified",
                "ReadOnly"
              ],
              "metadata": {
                "description": "Specify the type of lock on Cosmos DB account resource."
              }
            },
            "roleAssignments": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Array of role assignment objects that contain the \"roleDefinitionIdOrName\" and \"principalId\" to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, provide either the display name of the role definition, or its fully qualified ID in the following format: \"/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11\""
              }
            },
            "privateEndpoints": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Private Endpoints that should be created for Azure Cosmos DB account."
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 365,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Resource ID of the diagnostic storage account."
              }
            },
            "diagnosticWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Resource ID of the diagnostic log analytics workspace."
              }
            },
            "diagnosticEventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "diagnosticEventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "logsToEnable": {
              "type": "array",
              "defaultValue": [
                "HttpRequest",
                "Audit"
              ],
              "allowedValues": [
                "HttpRequest",
                "Audit"
              ],
              "metadata": {
                "description": "The name of logs that will be streamed."
              }
            },
            "metricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "The name of metrics that will be streamed."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogsWithDefaults",
                "count": "[length(parameters('logsToEnable'))]",
                "input": {
                  "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogsWithDefaults')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": "[if(not(equals(parameters('diagnosticLogsRetentionInDays'), 0)), true(), false())]",
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "diagnosticsMetricsWithDefaults",
                "count": "[length(parameters('metricsToEnable'))]",
                "input": {
                  "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetricsWithDefaults')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": "[if(not(equals(parameters('diagnosticLogsRetentionInDays'), 0)), true(), false())]",
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "privateEndpointsWithDefaults",
                "count": "[length(parameters('privateEndpoints'))]",
                "input": {
                  "name": "[format('{0}-{1}', parameters('name'), parameters('privateEndpoints')[copyIndex('privateEndpointsWithDefaults')].name)]",
                  "privateLinkServiceId": "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('name'))]",
                  "groupIds": [
                    "configurationStores"
                  ],
                  "subnetId": "[parameters('privateEndpoints')[copyIndex('privateEndpointsWithDefaults')].subnetId]",
                  "privateDnsZones": "[if(contains(parameters('privateEndpoints')[copyIndex('privateEndpointsWithDefaults')], 'privateDnsZoneId'), createArray(createObject('name', 'default', 'zoneId', parameters('privateEndpoints')[copyIndex('privateEndpointsWithDefaults')].privateDnsZoneId)), createArray())]",
                  "manualApprovalEnabled": "[if(contains(parameters('privateEndpoints')[copyIndex('privateEndpointsWithDefaults')], 'manualApprovalEnabled'), parameters('privateEndpoints')[copyIndex('privateEndpointsWithDefaults')].manualApprovalEnabled, false())]"
                }
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.AppConfiguration/configurationStores",
              "apiVersion": "2023-03-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('skuName')]"
              },
              "properties": {
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                "disableLocalAuth": "[parameters('disableLocalAuth')]",
                "enablePurgeProtection": "[if(equals(parameters('skuName'), 'Standard'), parameters('enablePurgeProtection'), null())]",
                "encryption": "[if(and(not(empty(parameters('keyVaultKeyIdentifier'))), not(empty(parameters('identityClientId')))), createObject('keyVaultProperties', createObject('keyIdentifier', parameters('keyVaultKeyIdentifier'), 'identityClientId', parameters('identityClientId'))), null())]",
                "softDeleteRetentionInDays": "[if(equals(parameters('skuName'), 'Standard'), parameters('softDeleteRetentionInDays'), null())]"
              },
              "tags": "[parameters('tags')]",
              "identity": "[if(contains(parameters('identityType'), 'UserAssigned'), createObject('type', parameters('identityType'), 'userAssignedIdentities', if(contains(parameters('identityType'), 'UserAssigned'), parameters('userAssignedIdentities'), createObject())), createObject('type', parameters('identityType')))]"
            },
            {
              "copy": {
                "name": "appConfigurationReplicas",
                "count": "[length(parameters('replicas'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.AppConfiguration/configurationStores/replicas",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('name'), parameters('replicas')[copyIndex()].name)]",
              "location": "[parameters('replicas')[copyIndex()].location]",
              "dependsOn": [
                "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('name'))]"
              ]
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.AppConfiguration/configurationStores/{0}', parameters('name'))]",
              "name": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetricsWithDefaults')]",
                "logs": "[variables('diagnosticsLogsWithDefaults')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('name'))]"
              ]
            },
            {
              "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.AppConfiguration/configurationStores/{0}', parameters('name'))]",
              "name": "[format('{0}-{1}-lock', parameters('name'), toLower(parameters('lock')))]",
              "properties": {
                "level": "[parameters('lock')]",
                "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "appConfiguration_rbac",
                "count": "[length(parameters('roleAssignments'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('cosmosdb-rbac-{0}-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "description": {
                    "value": "[coalesce(tryGet(parameters('roleAssignments')[copyIndex()], 'description'), '')]"
                  },
                  "principalIds": {
                    "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                  },
                  "roleDefinitionIdOrName": {
                    "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                  },
                  "principalType": {
                    "value": "[coalesce(tryGet(parameters('roleAssignments')[copyIndex()], 'principalType'), '')]"
                  },
                  "resourceId": {
                    "value": "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('name'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.16.2.56959",
                      "templateHash": "6726558242263499767"
                    }
                  },
                  "parameters": {
                    "description": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "principalIds": {
                      "type": "array"
                    },
                    "principalType": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "roleDefinitionIdOrName": {
                      "type": "string"
                    },
                    "resourceId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "App Configuration Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5ae67dd6-50cb-40e7-96ff-dc2bfa4b606b')]",
                      "App Configuration Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '516239f1-63e1-4d78-a4de-a74fb236a071')]",
                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                      "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                      "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                      "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                      "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                      "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "roleAssignment",
                        "count": "[length(parameters('principalIds'))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.AppConfiguration/configurationStores/{0}', last(split(parameters('resourceId'), '/')))]",
                      "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                      "properties": {
                        "description": "[parameters('description')]",
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                        "principalId": "[parameters('principalIds')[copyIndex()]]",
                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-{1}-private-endpoints', parameters('name'), uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "privateEndpoints": {
                    "value": "[variables('privateEndpointsWithDefaults')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.16.2.56959",
                      "templateHash": "5781174049967211056"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "privateEndpoints": {
                      "type": "array"
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "varPrivateEndpoints",
                        "count": "[length(parameters('privateEndpoints'))]",
                        "input": {
                          "name": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].name]",
                          "privateLinkServiceId": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].privateLinkServiceId]",
                          "groupIds": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].groupIds]",
                          "subnetId": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].subnetId]",
                          "privateDnsZones": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')], 'privateDnsZones'), createArray())]",
                          "customNetworkInterfaceName": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')], 'customNetworkInterfaceName'), null())]",
                          "manualApprovalEnabled": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')], 'manualApprovalEnabled'), false())]"
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "privateEndpoint",
                        "count": "[length(variables('varPrivateEndpoints'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2022-05-01",
                      "name": "[format('{0}-{1}', variables('varPrivateEndpoints')[copyIndex()].name, uniqueString(variables('varPrivateEndpoints')[copyIndex()].name, variables('varPrivateEndpoints')[copyIndex()].subnetId, variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "privateLinkServiceConnections": "[if(variables('varPrivateEndpoints')[copyIndex()].manualApprovalEnabled, null(), createArray(createObject('name', variables('varPrivateEndpoints')[copyIndex()].name, 'properties', createObject('privateLinkServiceId', variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId, 'groupIds', if(not(empty(variables('varPrivateEndpoints')[copyIndex()].groupIds)), variables('varPrivateEndpoints')[copyIndex()].groupIds, null())))))]",
                        "manualPrivateLinkServiceConnections": "[if(variables('varPrivateEndpoints')[copyIndex()].manualApprovalEnabled, createArray(createObject('name', variables('varPrivateEndpoints')[copyIndex()].name, 'properties', createObject('privateLinkServiceId', variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId, 'groupIds', if(not(empty(variables('varPrivateEndpoints')[copyIndex()].groupIds)), variables('varPrivateEndpoints')[copyIndex()].groupIds, null())))), null())]",
                        "subnet": {
                          "id": "[variables('varPrivateEndpoints')[copyIndex()].subnetId]"
                        },
                        "customNetworkInterfaceName": "[variables('varPrivateEndpoints')[copyIndex()].customNetworkInterfaceName]"
                      }
                    },
                    {
                      "copy": {
                        "name": "privateDnsZoneGroup",
                        "count": "[length(variables('varPrivateEndpoints'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2022-05-01",
                      "name": "[format('{0}/{1}', format('{0}-{1}', variables('varPrivateEndpoints')[copyIndex()].name, uniqueString(variables('varPrivateEndpoints')[copyIndex()].name, variables('varPrivateEndpoints')[copyIndex()].subnetId, variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId)), 'default')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "privateDnsZoneConfigs",
                            "count": "[length(variables('varPrivateEndpoints')[copyIndex()].privateDnsZones)]",
                            "input": {
                              "name": "[coalesce(tryGet(variables('varPrivateEndpoints')[copyIndex()].privateDnsZones[copyIndex('privateDnsZoneConfigs')], 'name'), 'default')]",
                              "properties": {
                                "privateDnsZoneId": "[variables('varPrivateEndpoints')[copyIndex()].privateDnsZones[copyIndex('privateDnsZoneConfigs')].zoneId]"
                              }
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-{1}', variables('varPrivateEndpoints')[copyIndex()].name, uniqueString(variables('varPrivateEndpoints')[copyIndex()].name, variables('varPrivateEndpoints')[copyIndex()].subnetId, variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId)))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "metadata": {
                "description": "The resource id of the App Configuration instance."
              },
              "value": "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the App Configuration instance."
              },
              "value": "[parameters('name')]"
            },
            "systemAssignedIdentityPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "Object Id of system assigned managed identity for Cosmos DB account (if enabled)."
              },
              "value": "[if(contains(parameters('identityType'), 'SystemAssigned'), reference(resourceId('Microsoft.AppConfiguration/configurationStores', parameters('name')), '2023-03-01', 'full').identity.principalId, '')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "m7",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "daprComponentType": {
            "value": "pubsub.azure.servicebus"
          },
          "location": {
            "value": "westus2"
          },
          "nameseed": {
            "value": "stephwe"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.15.31.15270",
              "templateHash": "1131087206267419097"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Specifies the location for all resources."
              }
            },
            "nameseed": {
              "type": "string",
              "metadata": {
                "description": "Used to name the Azure resources that are created"
              }
            },
            "environmentAlreadyExists": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Indicates if we should deploy the Dapr components to an existing environment"
              }
            },
            "containerAppEnvName": {
              "type": "string",
              "defaultValue": "[format('env-{0}', parameters('nameseed'))]",
              "metadata": {
                "description": "Specifies the name of the container app environment."
              }
            },
            "applicationEntityName": {
              "type": "string",
              "defaultValue": "[parameters('nameseed')]",
              "metadata": {
                "description": "The application relevant name for the dapr component you are implementing"
              },
              "maxLength": 8
            },
            "daprComponentType": {
              "type": "string",
              "metadata": {
                "description": "The dapr application component type to configure in the Environment"
              },
              "allowedValues": [
                "pubsub.azure.servicebus",
                "state.azure.blobstorage",
                "state.azure.cosmosdb"
              ]
            },
            "daprComponentName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The name of the dapr component, this will be autogenerated if not provided"
              }
            },
            "daprComponentScopes": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Names of container apps that can use this dapr component"
              }
            },
            "infrastructureSubnetId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "For deploying in your own Virtual Network, provide the Infrastructure Subnet Id"
              }
            },
            "zoneRedundant": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Zone Redundant (needs infrastructureSubnetId)"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Any tags that are to be applied to the Environment Components"
              }
            }
          },
          "variables": {
            "autoDaprComponentNameMap": {
              "pubsub.azure.servicebus": "[format('{0}pubsub', toLower(parameters('applicationEntityName')))]",
              "state.azure.blobstorage": "[format('{0}statestore', toLower(parameters('applicationEntityName')))]",
              "state.azure.cosmosdb": "[format('{0}statestore', toLower(parameters('applicationEntityName')))]"
            },
            "autoDaprComponentName": "[if(empty(parameters('daprComponentName')), variables('autoDaprComponentNameMap')[parameters('daprComponentType')], parameters('daprComponentName'))]"
          },
          "resources": [
            {
              "condition": "[not(parameters('environmentAlreadyExists'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('containerAppEnv-{0}', parameters('nameseed'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "nameseed": {
                    "value": "[parameters('nameseed')]"
                  },
                  "infraSubnetId": {
                    "value": "[parameters('infrastructureSubnetId')]"
                  },
                  "zoneRedundant": {
                    "value": "[parameters('zoneRedundant')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "17962859295998104484"
                    }
                  },
                  "parameters": {
                    "nameseed": {
                      "type": "string"
                    },
                    "containerAppEnvName": {
                      "type": "string",
                      "defaultValue": "[format('env-{0}', parameters('nameseed'))]",
                      "metadata": {
                        "description": "Specifies the name of the container app environment."
                      }
                    },
                    "containerAppLogAnalyticsName": {
                      "type": "string",
                      "defaultValue": "[format('log-{0}', parameters('nameseed'))]",
                      "metadata": {
                        "description": "Specifies the name of the log analytics workspace."
                      }
                    },
                    "sku": {
                      "type": "string",
                      "defaultValue": "Consumption",
                      "allowedValues": [
                        "Consumption",
                        "Premium"
                      ]
                    },
                    "zoneRedundant": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "logRetentionDays": {
                      "type": "int",
                      "defaultValue": 30
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Specifies the location for all resources."
                      }
                    },
                    "infraSubnetId": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "runtimeSubnetId": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "internalVirtualIp": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Sets the environment to only have a internal load balancer"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.App/managedEnvironments",
                      "apiVersion": "2022-06-01-preview",
                      "name": "[parameters('containerAppEnvName')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "[parameters('sku')]"
                      },
                      "properties": {
                        "zoneRedundant": "[parameters('zoneRedundant')]",
                        "appLogsConfiguration": {
                          "destination": "log-analytics",
                          "logAnalyticsConfiguration": {
                            "customerId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', parameters('containerAppLogAnalyticsName')), '2022-10-01').customerId]",
                            "sharedKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', parameters('containerAppLogAnalyticsName')), '2022-10-01').primarySharedKey]"
                          }
                        },
                        "vnetConfiguration": {
                          "infrastructureSubnetId": "[parameters('infraSubnetId')]",
                          "runtimeSubnetId": "[parameters('runtimeSubnetId')]",
                          "internal": "[parameters('internalVirtualIp')]"
                        },
                        "daprAIInstrumentationKey": "[reference(resourceId('Microsoft.Resources/deployments', format('appInsights-{0}', parameters('nameseed'))), '2020-10-01').outputs.instrumentationKey.value]"
                      },
                      "tags": "[parameters('tags')]",
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('appInsights-{0}', parameters('nameseed')))]",
                        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('containerAppLogAnalyticsName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2022-10-01",
                      "name": "[parameters('containerAppLogAnalyticsName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "sku": {
                          "name": "PerGB2018"
                        },
                        "retentionInDays": "[parameters('logRetentionDays')]"
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('appInsights-{0}', parameters('nameseed'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "logAnalyticsId": {
                            "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('containerAppLogAnalyticsName'))]"
                          },
                          "nameseed": {
                            "value": "[parameters('nameseed')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "4975339529296945177"
                            }
                          },
                          "parameters": {
                            "nameseed": {
                              "type": "string"
                            },
                            "logAnalyticsId": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Insights/components",
                              "apiVersion": "2020-02-02",
                              "name": "[format('ai-{0}', parameters('nameseed'))]",
                              "location": "[parameters('location')]",
                              "kind": "web",
                              "properties": {
                                "Application_Type": "web",
                                "WorkspaceResourceId": "[parameters('logAnalyticsId')]",
                                "IngestionMode": "LogAnalytics"
                              }
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Insights/components', format('ai-{0}', parameters('nameseed')))]"
                            },
                            "name": {
                              "type": "string",
                              "value": "[format('ai-{0}', parameters('nameseed'))]"
                            },
                            "instrumentationKey": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Insights/components', format('ai-{0}', parameters('nameseed'))), '2020-02-02').InstrumentationKey]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('containerAppLogAnalyticsName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "containerAppEnvironmentName": {
                      "type": "string",
                      "value": "[parameters('containerAppEnvName')]"
                    },
                    "logAnalyticsName": {
                      "type": "string",
                      "value": "[parameters('containerAppLogAnalyticsName')]"
                    },
                    "logAnalyticsId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('containerAppLogAnalyticsName'))]"
                    },
                    "appInsightsInstrumentationKey": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('appInsights-{0}', parameters('nameseed'))), '2020-10-01').outputs.instrumentationKey.value]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[equals(parameters('daprComponentType'), 'pubsub.azure.servicebus')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dapr-sb-{0}', parameters('nameseed'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "componentName": {
                    "value": "[variables('autoDaprComponentName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "containerAppEnvName": "[if(parameters('environmentAlreadyExists'), createObject('value', parameters('containerAppEnvName')), createObject('value', reference(resourceId('Microsoft.Resources/deployments', format('containerAppEnv-{0}', parameters('nameseed'))), '2020-10-01').outputs.containerAppEnvironmentName.value))]",
                  "entityName": {
                    "value": "[parameters('applicationEntityName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "8562488172001937469"
                    }
                  },
                  "parameters": {
                    "componentName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "entityName": {
                      "type": "string"
                    },
                    "containerAppEnvName": {
                      "type": "string"
                    },
                    "createAzureServiceForComponent": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "scopes": {
                      "type": "array",
                      "defaultValue": []
                    }
                  },
                  "variables": {
                    "daprComponent": "pubsub.azure.servicebus",
                    "serviceBusConnectionStringName": "sb-root-connectionstring"
                  },
                  "resources": [
                    {
                      "condition": "[parameters('createAzureServiceForComponent')]",
                      "type": "Microsoft.ServiceBus/namespaces/topics/subscriptions",
                      "apiVersion": "2021-11-01",
                      "name": "[format('{0}/{1}/{2}', format('sb-{0}-{1}', parameters('componentName'), uniqueString(resourceGroup().id, parameters('location'))), parameters('entityName'), parameters('entityName'))]",
                      "properties": {
                        "deadLetteringOnFilterEvaluationExceptions": true,
                        "deadLetteringOnMessageExpiration": true,
                        "maxDeliveryCount": 10
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ServiceBus/namespaces/topics', format('sb-{0}-{1}', parameters('componentName'), uniqueString(resourceGroup().id, parameters('location'))), parameters('entityName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('createAzureServiceForComponent')]",
                      "type": "Microsoft.ServiceBus/namespaces/topics",
                      "apiVersion": "2021-11-01",
                      "name": "[format('{0}/{1}', format('sb-{0}-{1}', parameters('componentName'), uniqueString(resourceGroup().id, parameters('location'))), parameters('entityName'))]",
                      "properties": {
                        "supportOrdering": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ServiceBus/namespaces', format('sb-{0}-{1}', parameters('componentName'), uniqueString(resourceGroup().id, parameters('location'))))]"
                      ]
                    },
                    {
                      "type": "Microsoft.App/managedEnvironments/daprComponents",
                      "apiVersion": "2022-03-01",
                      "name": "[format('{0}/{1}', parameters('containerAppEnvName'), parameters('componentName'))]",
                      "properties": {
                        "componentType": "[variables('daprComponent')]",
                        "version": "v1",
                        "secrets": [
                          {
                            "name": "[variables('serviceBusConnectionStringName')]",
                            "value": "[format('{0};EntityPath={1}', listKeys(resourceId('Microsoft.ServiceBus/namespaces/AuthorizationRules', format('sb-{0}-{1}', parameters('componentName'), uniqueString(resourceGroup().id, parameters('location'))), 'RootManageSharedAccessKey'), '2021-11-01').primaryConnectionString, parameters('entityName'))]"
                          }
                        ],
                        "metadata": [
                          {
                            "name": "connectionString",
                            "secretRef": "[variables('serviceBusConnectionStringName')]"
                          },
                          {
                            "name": "consumerID",
                            "value": "[parameters('entityName')]"
                          }
                        ],
                        "scopes": "[parameters('scopes')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ServiceBus/namespaces', format('sb-{0}-{1}', parameters('componentName'), uniqueString(resourceGroup().id, parameters('location'))))]"
                      ]
                    },
                    {
                      "condition": "[parameters('createAzureServiceForComponent')]",
                      "type": "Microsoft.ServiceBus/namespaces",
                      "apiVersion": "2021-11-01",
                      "name": "[format('sb-{0}-{1}', parameters('componentName'), uniqueString(resourceGroup().id, parameters('location')))]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "Standard",
                        "tier": "Standard"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('containerAppEnv-{0}', parameters('nameseed')))]"
              ]
            },
            {
              "condition": "[equals(parameters('daprComponentType'), 'state.azure.blobstorage')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dapr-state-stor-{0}', parameters('nameseed'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('autoDaprComponentName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "containerAppEnvName": "[if(parameters('environmentAlreadyExists'), createObject('value', parameters('containerAppEnvName')), createObject('value', reference(resourceId('Microsoft.Resources/deployments', format('containerAppEnv-{0}', parameters('nameseed'))), '2020-10-01').outputs.containerAppEnvironmentName.value))]",
                  "entityName": {
                    "value": "[parameters('applicationEntityName')]"
                  },
                  "scopes": {
                    "value": "[parameters('daprComponentScopes')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "1287416814935305641"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "entityName": {
                      "type": "string"
                    },
                    "containerAppEnvName": {
                      "type": "string"
                    },
                    "createAzureServiceForComponent": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "scopes": {
                      "type": "array",
                      "defaultValue": []
                    }
                  },
                  "variables": {
                    "daprComponent": "state.azure.blobstorage",
                    "rawStorageAccountName": "[format('st{0}{1}', parameters('name'), uniqueString(resourceGroup().id, parameters('name')))]",
                    "storageAccountName": "[if(greater(length(variables('rawStorageAccountName')), 24), substring(toLower(variables('rawStorageAccountName')), 0, 24), variables('rawStorageAccountName'))]"
                  },
                  "resources": [
                    {
                      "condition": "[and(parameters('createAzureServiceForComponent'), equals(variables('daprComponent'), 'state.azure.blobstorage'))]",
                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                      "apiVersion": "2021-09-01",
                      "name": "[format('{0}/{1}/{2}', variables('storageAccountName'), 'default', toLower(parameters('entityName')))]",
                      "properties": {
                        "publicAccess": "None"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountName'), 'default')]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('createAzureServiceForComponent'), equals(variables('daprComponent'), 'state.azure.blobstorage'))]",
                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                      "apiVersion": "2021-09-01",
                      "name": "[format('{0}/{1}', variables('storageAccountName'), 'default')]",
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
                      ]
                    },
                    {
                      "condition": "[equals(variables('daprComponent'), 'state.azure.blobstorage')]",
                      "type": "Microsoft.App/managedEnvironments/daprComponents",
                      "apiVersion": "2022-03-01",
                      "name": "[format('{0}/{1}', parameters('containerAppEnvName'), format('{0}-state', parameters('name')))]",
                      "properties": {
                        "componentType": "[variables('daprComponent')]",
                        "version": "v1",
                        "secrets": [
                          {
                            "name": "storageaccountkey",
                            "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-09-01').keys[0].value]"
                          }
                        ],
                        "metadata": [
                          {
                            "name": "accountKey",
                            "secretRef": "storageaccountkey"
                          },
                          {
                            "name": "accountName",
                            "value": "[variables('storageAccountName')]"
                          },
                          {
                            "name": "containerName",
                            "value": "[parameters('entityName')]"
                          }
                        ],
                        "scopes": "[parameters('scopes')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('createAzureServiceForComponent'), equals(variables('daprComponent'), 'state.azure.blobstorage'))]",
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2021-09-01",
                      "name": "[variables('storageAccountName')]",
                      "kind": "StorageV2",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "Standard_LRS"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('containerAppEnv-{0}', parameters('nameseed')))]"
              ]
            },
            {
              "condition": "[equals(parameters('daprComponentType'), 'state.azure.cosmosdb')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dapr-state-cosmos-{0}', parameters('nameseed'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "containerAppEnvName": "[if(parameters('environmentAlreadyExists'), createObject('value', parameters('containerAppEnvName')), createObject('value', reference(resourceId('Microsoft.Resources/deployments', format('containerAppEnv-{0}', parameters('nameseed'))), '2020-10-01').outputs.containerAppEnvironmentName.value))]",
                  "componentName": {
                    "value": "[variables('autoDaprComponentName')]"
                  },
                  "entityName": {
                    "value": "[parameters('applicationEntityName')]"
                  },
                  "scopes": {
                    "value": "[parameters('daprComponentScopes')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "1103977542213173034"
                    }
                  },
                  "parameters": {
                    "componentName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "entityName": {
                      "type": "string"
                    },
                    "containerAppEnvName": {
                      "type": "string"
                    },
                    "createAzureServiceForComponent": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "scopes": {
                      "type": "array",
                      "defaultValue": []
                    }
                  },
                  "variables": {
                    "daprComponent": "state.azure.cosmosdb",
                    "databaseKeyName": "masterkey",
                    "databaseName": "[format('{0}Db', parameters('entityName'))]",
                    "databaseLocations": [
                      {
                        "locationName": "[parameters('location')]",
                        "failoverPriority": 0,
                        "isZoneRedundant": false
                      }
                    ]
                  },
                  "resources": [
                    {
                      "condition": "[parameters('createAzureServiceForComponent')]",
                      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
                      "apiVersion": "2022-05-15",
                      "name": "[format('{0}/{1}/{2}', format('cosmos-{0}-{1}', parameters('componentName'), uniqueString(resourceGroup().id, parameters('location'))), variables('databaseName'), parameters('entityName'))]",
                      "properties": {
                        "resource": {
                          "id": "[parameters('entityName')]",
                          "partitionKey": {
                            "paths": [
                              "/partitionKey"
                            ],
                            "kind": "Hash"
                          }
                        },
                        "options": {
                          "autoscaleSettings": {
                            "maxThroughput": 4000
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', format('cosmos-{0}-{1}', parameters('componentName'), uniqueString(resourceGroup().id, parameters('location'))), variables('databaseName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('createAzureServiceForComponent')]",
                      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
                      "apiVersion": "2022-05-15",
                      "name": "[format('{0}/{1}', format('cosmos-{0}-{1}', parameters('componentName'), uniqueString(resourceGroup().id, parameters('location'))), variables('databaseName'))]",
                      "properties": {
                        "resource": {
                          "id": "[variables('databaseName')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DocumentDB/databaseAccounts', format('cosmos-{0}-{1}', parameters('componentName'), uniqueString(resourceGroup().id, parameters('location'))))]"
                      ]
                    },
                    {
                      "type": "Microsoft.App/managedEnvironments/daprComponents",
                      "apiVersion": "2022-03-01",
                      "name": "[format('{0}/{1}', parameters('containerAppEnvName'), parameters('componentName'))]",
                      "properties": {
                        "componentType": "[variables('daprComponent')]",
                        "version": "v1",
                        "secrets": [
                          {
                            "name": "[variables('databaseKeyName')]",
                            "value": "[listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', format('cosmos-{0}-{1}', parameters('componentName'), uniqueString(resourceGroup().id, parameters('location')))), '2022-05-15').primaryMasterKey]"
                          }
                        ],
                        "metadata": [
                          {
                            "name": "url",
                            "value": "[reference(resourceId('Microsoft.DocumentDB/databaseAccounts', format('cosmos-{0}-{1}', parameters('componentName'), uniqueString(resourceGroup().id, parameters('location')))), '2022-05-15').documentEndpoint]"
                          },
                          {
                            "name": "database",
                            "value": "[variables('databaseName')]"
                          },
                          {
                            "name": "collection",
                            "value": "[parameters('entityName')]"
                          },
                          {
                            "name": "[variables('databaseKeyName')]",
                            "secretRef": "[variables('databaseKeyName')]"
                          }
                        ],
                        "scopes": "[parameters('scopes')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DocumentDB/databaseAccounts', format('cosmos-{0}-{1}', parameters('componentName'), uniqueString(resourceGroup().id, parameters('location'))))]"
                      ]
                    },
                    {
                      "condition": "[parameters('createAzureServiceForComponent')]",
                      "type": "Microsoft.DocumentDB/databaseAccounts",
                      "apiVersion": "2022-05-15",
                      "name": "[format('cosmos-{0}-{1}', parameters('componentName'), uniqueString(resourceGroup().id, parameters('location')))]",
                      "kind": "GlobalDocumentDB",
                      "location": "[parameters('location')]",
                      "properties": {
                        "consistencyPolicy": {
                          "defaultConsistencyLevel": "Session"
                        },
                        "locations": "[variables('databaseLocations')]",
                        "databaseAccountOfferType": "Standard"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('containerAppEnv-{0}', parameters('nameseed')))]"
              ]
            }
          ],
          "outputs": {
            "containerAppEnvironmentName": {
              "type": "string",
              "value": "[if(parameters('environmentAlreadyExists'), parameters('containerAppEnvName'), reference(resourceId('Microsoft.Resources/deployments', format('containerAppEnv-{0}', parameters('nameseed'))), '2020-10-01').outputs.containerAppEnvironmentName.value)]",
              "metadata": {
                "description": "The name of the created Azure Container Apps Environment"
              }
            },
            "appInsightsInstrumentationKey": {
              "type": "string",
              "value": "[if(parameters('environmentAlreadyExists'), '', reference(resourceId('Microsoft.Resources/deployments', format('containerAppEnv-{0}', parameters('nameseed'))), '2020-10-01').outputs.appInsightsInstrumentationKey.value)]",
              "metadata": {
                "description": "The Azure Applications Insights (telemetry) instrumentation key"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "tsModule",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "loc": {
            "value": "westus3"
          }
        },
        "templateLink": {
          "id": "/subscriptions/e5ef2b13-6478-4887-ad57-1aa6b9475040/resourceGroups/sawbicep/providers/Microsoft.Resources/templateSpecs/storageSpec/versions/1.0a"
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "tsModule2",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "loc": {
            "value": "westus3"
          }
        },
        "templateLink": {
          "id": "/subscriptions/e5ef2b13-6478-4887-ad57-1aa6b9475040/resourceGroups/sawbicep/providers/Microsoft.Resources/templateSpecs/storageSpec/versions/2.0a"
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "m5",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.22.7.55222",
              "templateHash": "4593678991167363015"
            },
            "description": "Azure Storage is a cloud-based storage service offered by Microsoft that provides highly scalable and durable storage for data and applications. Storage Accounts are the fundamental storage entity in Azure Storage and can be used to store data objects such as blobs, files, queues, tables, and disks.\n\nThis Bicep module allows users to create or use existing Storage Accounts with options to control redundancy, access, and security settings. Zone-redundancy allows data to be stored across multiple Availability Zones, increasing availability and durability. Virtual network rules can be used to restrict or allow network traffic to and from the Storage Account. Encryption and TLS settings can be configured to ensure data security.\n\nThe module supports both blob and file services, allowing users to store and retrieve unstructured data and files. The output of the module is the ID of the created or existing Storage Account, which can be used in other Azure resource deployments."
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "m1",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "me myself"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "8019017868553956840"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of someone to say hi to."
                      }
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "greeting": {
                      "type": "string",
                      "value": "[format('Hello from Bicep registry - Hi {0}!', parameters('name'))]",
                      "metadata": {
                        "description": "The hello message."
                      }
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "greeting": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'm1'), '2022-09-01').outputs.greeting.value]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "relative path module",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "westus3"
          },
          "storagePrefix": {
            "value": "stephwe"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.22.7.55222",
              "templateHash": "11547046557283063662"
            }
          },
          "parameters": {
            "storagePrefix": {
              "type": "string",
              "minLength": 3,
              "maxLength": 11
            },
            "storageSKU": {
              "type": "string",
              "defaultValue": "Standard_LRS",
              "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS",
                "Standard_ZRS",
                "Premium_LRS",
                "Premium_ZRS",
                "Standard_GZRS",
                "Standard_RAGZRS"
              ]
            },
            "location": {
              "type": "string"
            }
          },
          "variables": {
            "uniqueStorageName": "[format('{0}{1}', parameters('storagePrefix'), uniqueString(resourceGroup().id))]"
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2019-04-01",
              "name": "[variables('uniqueStorageName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('storageSKU')]"
              },
              "kind": "StorageV2",
              "properties": {
                "supportsHttpsTrafficOnly": true
              }
            }
          ],
          "outputs": {
            "storageEndpoint": {
              "type": "object",
              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('uniqueStorageName')), '2019-04-01').primaryEndpoints]"
            }
          }
        }
      }
    }
  ],
  "outputs": {
    "greeting": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'm1'), '2022-09-01').outputs.greeting.value]"
    },
    "storageEndpoint": {
      "type": "object",
      "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('uniqueStorageName')), '2019-04-01').primaryEndpoints]"
    }
  }
}